==> en sowieso het belang van een goede brede architectuur benadrukken die uit allerlei componenten bestaat, het framework zelf wordt steeds minder belangrijk bij high-tech sites
==> Ik weet niet of deze overview nog nodig is, ik vond http://birdhouse.org/blog/2009/11/11/drupal-or-django/ wel goed omwille van de Drupal/Wordpress voorstelling. Misschien eerder ook op die manier er een paar concrete puntjes uitnemen dan een big-ass overview. Anderzijds heb ik toch wel redelijk wat ervaring met Pylons en mag er daarover toch nog wel iets geschreven worden

MISSCHIEN HERWERKEN NAAR 
==> post over Wordpress en Django als kickass combo
==> afweging van een softwarepakket in groot gebruik (Django) vs. een kleiner project zoals Pylons/Werkzeug, en de mate waarin extra functionaliteit belangrijk is (bv. SQLAlchemy is beter dan de Django ORM) of je moet gaan voor zekerheid en een brede user-base. cf. ook Ian Bicking (?) zijn opmerkingen over Elixir.
==> deployment-kritiek op Drupal kan gesubsumeerd worden in een algemene(re) post over maintainability, re: Yelvington

http://simonwillison.net/2009/Nov/15/drupal/

* Drupal
+ bijna geen programmeerwerk
- bijna geen programmeerwerk (alles via een GUI doen is tijdsintensief - als je weet wat je wil is het sneller gecodeerd, en is een ramp voor deployment)
- na te werken met SQLAlchemy wil ik gewoon niet terug naar dat gekke CCK-systeem
- gerelateerd: de FormAPI - waardoor ik eerst zo onder de indruk was - is nog niet half zo goed als FormAlchemy of de Newforms in Django.
+ Drupal is geniaal als RAD framework
+ Views en CCK: twee tooltjes, maar ze doen zoveel!
+ Je krijgt écht veel, en je mag dat niet onderschatten. Je eigen tagsysteem maken (met autocomplete, free tagging en categorieën, synoniemen, ...) kan al een paar dagen in beslag nemen, bijvoorbeeld. Daarnaast: overzichtspagina's voor vanalles, search engine (granted, niet de beste, maar beter dan LIKE op je database te gooien), image handling (imagecache), registratie van users, een permissiesysteem, ...
- ...maar misschien iets te goed voor eigen bestwil. Je kan klanten meestal 80-90% leveren van wat ze willen binnen de week, en dan moet je vertellen dat alle finetuning nog een maand zal duren. Het is moeilijk om zo nog iteratief te werken.
- Daarop voortbouwend: die manier van werken kan zeer ontmoedigend zijn. Dit kan je Drupal niet verwijten want het is iets louter psychologisch, maar als de tweede helft van je project er uit bestaat om voortdurend door de documentatie te snuisteren op zoek naar nèt die hook die doet wat je wil. Ik wil niet voortdurend in de documentatie zitten, ik wil programmeren.
- 4k modules betekent dat je écht lang op zoek kan zijn naar de juiste module, en niets sluit uit dat die dan plots zonder een maintainer valt of dat je ver in het ontwikkelingsproces voor verrassingen komt te staan. (bv. de Office Hours die eerst alles goed leek te doen, maar als je data een tweede keer ingaf bij dezelfde node liep er vanalles mis)
- Drupal probeert alles te zijn voor iedereen. Je ziet geregeld google trends postings die vergelijken met Joomla en Wordpress, terwijl dàt helemaal geen vergelijkbare systemen zijn. Door te schipperen tussen het "drupal framework" en het "drupal cms" stelt men beide partijen teleur. De developers omdat Drupal als framework zèèr middelmatig is (goed hook-systeem, slecht systeem voor interactie met databank, mooie modulaire architectuur, middelmatig theming-systeem) maar tegelijk ook voor eindgebruikers out-of-the-box niets te bieden heeft. Drupal out of the box is onbruikbare, ongebruiksvriendelijke crap. Maar niemand gebruikt het zo en daar dient het niet voor dus so what? Wel, dat maakt wél uit als zoveel dev-aandacht daar naartoe gaat.



De reden om voor een voorgebouwd systeem te kiezen is enerzijds dat je sneller vertrokken bent en dat je maintainability verhoogt (cf. http://drupal.org/node/102269 over Rails of Yelvington die Drupal verdedigt op http://www.yelvington.com/content/first-rule-coding-drupal). Maar sneller vertrokken is zinloos als je daarna vastzit omdat het systeem op één manier werkt en niet op een andere. Kleine componenten werken beter in die optiek. Maintainability / hoge bus-factor is ook enkel waar als je je software zeer goed documenteert en kan ondersteunen. Quod non. 

(http://video.google.com/videoplay?docid=-4216011961522818645&q=subversion+open+source)



- CCK is een prachtig stukje software, maar is (voor programmeurs) enkel nodig omdat er geen deftige ORM is. Handig voor een CMS, maar een dikke merde eens je versiecontrole wil gebruiken. (cf. anekdote IBM-dudette die àlles in code stak)
- Views is een prachtig stukje software, maar is (voor programmeurs) enkel nodig omdat er geen deftige query language is (voorbeeld geven: één lijntje code in ORM versus heel de Views interface in screenshot)

- veel Drupal-features (zoals allerlei configuratieschermen, herschikbare blocks, ...) zijn enkel nodig voor niet-technische gebruikers maar houden geen enkele steek binnen webontwerpshops, waar je een pakket wil samenstellen voor de klant dat perfect is en dat ook enkel voor die ene klant dient, op die ene server.

templating
---------- 
"I see this as the problem with using generators, and it turns out most of what I write, ultimately, is trying to auto-generate stuff. Generators want generics. Semantic HTML wants specifics. The generator has no idea what you want to do with the output, so it tries to give you output that you can use in any situation. Semantic HTML knows exactly what it wants to be used for, and so it can have an economy of code that generated HTML simply can't." (http://www.angrydonuts.com/an-observation-about-designers-versus-developers)



"Theme override functions are great, but designers should have to work to add HTML not take it away. This is a big difference between Drupal and other communities. If Drupal developers simply adopted a minimum HTML starting point, it would make a big difference.

I'm a designer and a developer. I've written Drupal modules, I'm no "ninja" but I know a good bit of the API, I know PHP, and I've been able to make Drupal do things it doesn't do out of the box. I've made many themes and overriden (is that a word?) many theme functions. There are so many template files to deal with, that most designers just give up and Drupal gets mediocre themes." (Eric)

> overlopen waarom Drupal mij vroeger zo behulpzaam leek, nu nog steeds, maar: frustraties van DrupalCon, en eye-opener door te werken met SQLAlch/FormAlch

* Wordpress

- architectuur van WP is écht niet zo indrukwekkend en voelt een beetje raar aan als je gewoon bent met grote systemen te werken, mààr templates maken is doodeenvoudig en op een-twee-drie steek je een eigen plugin in elkaar. Als je niet te veel geavanceerde features nodig hebt is Wordpress echt goddelijk - de WYSIWYG editor die er bijkomt is echt de beste die ik al gezien heb, het systeem is gebruiksvriendelijk en gebruikers kunnen overal op het internet tutorials vinden als ze tòch iets niet begrijpen. Het systeem om eigen velden toe te voegen met metadata is, als je het vergelijkt met iets als CCK in Drupal, volledig kinderlijk, maar als je het gebruikt waarvoor het dient zie je er de schoonheid van.

* Django, Pylons en Werkzeug

= Pylons =
+ qua achterliggende filosofie het beste (geen NIH, best-of-breed componenten zoals SQLAlchemy/Elixir maar ook Routes)
+ "get out of my way" - Pylons zelf doet bijna niks, het zorgt voor wat glue tussen je componenten (ORM, templating, url routing), geeft een aantal handige helpers (die je compleet kan negeren) en een prachtige debugger waar je snel niet meer zonder kan. (maar die je ook vaker zal nodig hebben dan in Django, omdat je meer moet uitproberen wegens slechtere docs).
+ "Easier is harder": http://groovie.org/2007/09/04/sqlalchemy-declarative-layers-and-the-orm-problem
+ aansluitend: dat betekent ook dat je voor snelle mockups gewoon een pythonbestand als CGI kan runnen en die paar componenten waarvan je net iets wil uittesten kan inladen, zonder meteen een project te moeten aanmaken enz.
- De zever over een gebrek aan conceptuele integriteit tegenover Django is volledig overroepen. Een templating engine is een templating engine, en die hoeft niks te maken te hebben met de rest van je frameworks. Routes zijn routes, en hoeven niet te 'integreren' met hoe je precies je controllers schrijft. Dit is geen filosofische discussie, eerder: wie Pylons uitprobeert zal zien dat dat een non-discussie is.
- "lightweight" tot in het extreme, zelfs helpers die _iedereen_ nodig heeft zoals url_for moet je expliciet includen.

Ben Bangert over beide: http://stackoverflow.com/questions/48681/pros-cons-of-django-vs-pylons/63441
Jeff Croft over Django: http://jeffcroft.com/blog/2006/may/02/django-non-programmers/

= Django =
+ De docs van Pylons zijn geen ramp meer zoals je vaak op oudere blogposts (2008 en vroeger) leest maar ze zijn echt niet te vergelijken met die van Django.
+ Pinax: registratie, vergeten ww, ...
+ meer features in Django zelf om het leven makkelijker te maken, zoals users out of the box
+ admin-interface van Pylons is handig als admin, maar die van Django is écht bruikbaar voor alle users die content moeten ingeven.
- routes is beter dan django-urls, en de black-magic accusatie is zever (http://justin.harmonize.fm/index.php/2008/09/django-round-2/ en http://farmdev.com/thoughts/72/what-makes-pylons-stand-out-as-a-web-framework-/ in de comments)







------------------------------------------

It's an interesting overview, but it would have benefited from being clearer about what use-cases we're talking about.

I'm currently using Drupal for a low-budget project at a college department because all the available modules can give them 90% of what they want in no time. E.g. the <a href="http://drupal.org/project/biblio">Bibliography module</a> would take weeks to develop from scratch in Django, but only takes half an hour to download and configure in Drupal. I've deployed multiple Wordpress installations in situations where people need something cheap, simple and CMS-like, and still love how user-friendly it is. But for any project that needs to be flexible and where you need full control over how everything works and looks, Django wins hands down.

The same goes for deployment. For a single developer, Drupal is easier to deploy, but when you're working in a team with version control and want test/staging/live servers, Drupal is frustrating as hell, as James Stevenson mentions. (Although, with the Features and Context modules from DevelopmentSeed, things are starting to get on track.)

You're too friendly for Django when it comes to reusable apps, though. Django has some great ones spread across the web, but even Pinax really can't compare to all the contributed modules for Drupal. But, again, this isn't necessarily a problem as one of the reasons you'd pick Django over Drupal is to be in control of your code.

And you're too harsh on Django when it comes to the learning curve.

I led a team doing a Drupal-powered site a while ago, and we switched to Django halfway through the project. The team members were unfamiliar with both. Getting the project members familiar with Drupal amounted to me being some sort of a living version of http://api.drupal.org/, being asked every five minutes "hey, what hook do I need to change this and do that?" or "which of these ten contributed modules is the standard solution for this kind of problem?" When we switched to Django, reading the four-page getting-started tutorial was enough to get people hacking away.

In Django you <em>build</em> things, which is easy. In Drupal you <em>modify</em> how the existing code works, so you need a good working knowledge of what can be modified how (hooks, theme layer overrides, existing modules that do the work for you, ...) and that requires a lot of experience.

The learning curve follows from the basic architecture of these systems, so I guess you can't blame Drupal for being the loser on this front. But the sub-par documentation sure doesn't help.

Another point that I think is worth mentioning is that Django can feel empowering after working with Drupal. Yes, you have to code more yourself, but at least it doesn't feel like fighting the system. And you're actually coding most of the time, instead of going through the drudgery of configuring a boatload of modules. And a happy coder is a more productive coder, a lesson the Ruby on Rails community has taught us.

Also in the realm of subjective experience, Django really pushes you to think about the structure of your data and how everything relates to everything else, whereas with CCK in Drupal there's a temptation to be more cavalier about your data models. I guess this is because CCK defines both your data structure and how your input/edit forms will look. If you're not careful you start thinking in terms of how you want your input forms to look, rather than about how your data should be structured.

Anyhow, I may not entirely agree with your assessment of Drupal and Django, but I think your basic conclusion is sound: if you can get away with it, use WordPress and if you need something special, use Django.

