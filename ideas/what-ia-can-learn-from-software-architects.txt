We need a little more conversation between software architects — who have been talking about how to model a problem domain for ages — and information architects. We need people who can do both. Because a lot of information architecture work is actually being done by software architects. And I think that's a good thing, because software architects are used to think abstractly about how to translate _what there is_ and _how things work_ into a representation that a machine can understand. They're probably better at this stuff than a lot of information scientists and ontologists are. But because software architects don't realize it, they don't hone their information modelling skills nearly as much as they should, and stick with their rusty old UML diagrams as their universal hammer.