* Low-tech is the new high-tech

(Denk ook 37signals, "take the minimum that could work, and cut it in half")

=> Informatici hebben vaak de neiging om te overengineeren en om alles zelf te willen maken, terwijl we heel hard voor onszelf moeten zijn en een product moeten proberen afleveren met zo weinig mogelijk features (cf. 37signals), dat zoveel mogelijk rekening houdt met de omgeving waarin het gedeployed wordt (cf. Shirky) en met een goede strategie om bit-rot te vermijden (cf. Google-peten).

De ironie is vaak dat uitstekende programmeurs even lang of langer werken aan een identiek project dan een script kid die net PHP heeft geleerd (cf. do-ocracy), omdat de uitstekende programmeur elegante en herbruikbare code wil schrijven (cf. een bron over 'overgenericeren'), rekening wil houden met alle edge cases, zoekt naar best practices, weigert om hacks te gebruiken... terwijl de script kid gewoon begint te coden en voor je het weet een werkend prototype voor zich heeft.



Pragmatic Programmers (wees voorbereid op alles) <=> Getting Real 
(Don't waste your time on problems you don't have yet) -- hangt natuurlijk af van wat voor producten je maakt e.d., en onervaren programmeurs moet je herhaaldelijk hameren op het feit dat je niet mag hardcoden, maar eens daar voorbij wordt het subtieler, meer afhankelijk van project tot project hoe veel tijd je moet steken in flexibiliteit. De PP's argumenteren ook vanuit hun positie als team, die zich geen zorgen moet maken over funding, terwijl 37signals als startend bedrijf goed moest oppassen waarin ze hun tijd investeerden. Cf. ook: http://thedailywtf.com/Articles/Soft_Coding.aspx PP spreekt over software die mogelijks zeer lang in gebruik blijft binnen een bedrijf, terwijl andere teams er rekening mee moet houden dat hun oplossing evengoed een half jaar later al door iets anders vervangen kan worden.



We moeten vermijden dat we, naargelang we meer bijleren over goede software-ontwikkeling, ons pragmatisme verliezen. EŽn middel daar in is al tot in den treure besproken: agile programming. Een ander veel minder. En dat is je terug verplaatsen in de geest van iemand die net genoeg kan programmeren om gevaarlijk te zijn, of zelfs mensen die niet kunnen programmeren en toch technologische oplossingen zoeken voor hun problemen door op een creatieve manier om te gaan met bestaande software. 

=> Veel mensen hebben nood aan technologie om hun dagelijks werk te vergemakkelijken. Maar kleine vzw's, winkeliers, studentenverenigingen enz. hebben geen financi‘le ruimte om informatici in te huren, waardoor ze vastzitten aan bestaande softwarepakketten en die dan maar op een creatieve manier moeten aanwenden. Daar valt veel van te leren.

Interessant gebruik van bestaande technologie: 

- De Moeial: GMail voor de eindredactie
- Hoe antwoorden op een gedeeld e-mailadres: gewoon replies terug BCC'en naar het gedeelde mailadres. Kan in heel wat use-cases de nood aan contact management oplossen.

Technologie gemaakt om in te spelen op heel diverse noden:

- DabbleDB

* Case: Indicatorenwebsite met DabbleDB

- Men wou een statistiekenportaal, maar had niet meer dan een paar duizend euro ter beschikking. Alleen al de planning voor zo'n project zou bij het gemiddelde ontwerpbedrijf hun budget overschreden hebben.
- Door alle databankfuncties over te dragen aan DabbleDB (gratis voor vrij beschikbare datasets), gebruik te maken van een minimale syntax om meerdere kolommen of rijen te groeperen onder een bepaalde hoofding, en de mogelijkheid om in Drupal die datasets binnen te halen en er wat metadata aan toe te voegen (voetnoten, opmerkingen) was het mogelijk om voor een shoe-string budget zo'n portaal op te zetten. Kan het concurreren met Eurostat, <x>, <y>? Nee. Is de oplossing flexibel genoeg om alle mogelijke wensen die de Universiteit Antwerpen ooit heeft voor dit project in te willigen zonder de flow van het programma helemaal te moeten herorganiseren? Nee.

Wat ze wel hebben is een werkend systeem waar studenten en journalisten makkelijk statistische data over sociale thema's kunnen bekijken, doorzoeken en filteren naar hartelust, exporteren om er zelf analyse op te doen of weergegeven zien in grafiekvorm. Het pragmatisch aanwenden van bepaalde software en je niet doodstaren op hoe de ideale oplossing er zou uitzien is een vereiste voor veel software tegenwoordig (cf. Shirky) die op een klein budget wordt gemaakt, een beperkt publiek dient en mogelijks toch niet langer dan twee-drie jaar in dienst is.


* Projectplanning

Niet elke informaticus maar wŽl elke projectplanner zou een goede kennis moeten hebben van officepakketten, productiviteitsprogramma's en SaaS-applicaties op het internet. 

Een tijd geleden had ik een gesprek met een non-profit die uit een databank rapporten wilden trekken alsook daaraan wat data toevoegen. EŽn softwarebedrijf had daarvoor een maand werk gerekend - wat een serieuze hap uit het budget zou worden. Dus ze vroegen aan mij een second opinion. In tegenstelling tot veel opdrachten waarvoor je de gevraagde functionaliteiten uit je klanten moet sleuren om ze dan te wikken en wegen, had ŽŽn van de werknemers daar een werkend prototype uitgedacht in Microsoft Access. Waarom ze niet tevreden waren over Access en liever niet wilden verderbouwen op dat prototype? "Ik heb gehoord dat grote access-databanken niet zo stabiel zijn en we willen geen data verliezen."

Nu ga je me niet horen zeggen dat Access een geweldige oplossing is, maar iemand met wat kennis van bureau-automatisering had toch de stabiliteit van dat prototype rapportagesysteem kunnen opkrikken, de scripts kunnen refactoren om makkelijke aanpassingen in de toekomst te verzekeren Žn best practices doorgeven over hoe je datacorruptie en -verlies kan vermijden? En dat z˜nder duizenden euro's te factureren om het wiel heruit te vinden in een custom-made applicatie?

Wanneer een bedrijf naar jou komt en ze vragen je voor een oplossing kan je er niet van uitgaan dat ze heel het internet al afgeschuimd hebben naar bestaande pakketten die doen wat ze willen, of dat ze alle power-features kennen van de pakketten die ze reeds gebruiken. Als je als ontwikkelaar niet kan ruiken wanneer iemand _geen_ behoefte heeft aan je diensten, of wanneer je je klant kan verderhelpen met een systeem dat functioneel 90% doet van wat ze nodig hebben aan een tiende van de prijs die een op maat gemaakte applicatie zou kosten, dan doe je jezelf oneer aan. Met de huidige explosie aan internetapplicaties die een API of pluginsysteem bieden, zal het belang alleen maar toenemen van een goede algemene softwarekennis en een working knowledge over hoe je zo'n systemen kan samenpuzzelen tot iets moois en elegants. Zoiets flatteert je niet als programmeur, maar het bevestigt je als een goede down-to-earth analist die zijn klanten voorop plaatst en hun belangen behartigt eerder dan er geld te proberen uitslaan. En dan komt de business wel vanzelf naar je toe.

Heb je de API's van Backpack, Basecamp en Highrise al eens bekeken? Weet je hoeveel Google Apps premier edition kost per user, welke mogelijkheden dat biedt, en hoe je als programmeur extensies kan maken op de standaardfunctionaliteit? <3de voorbeeld> Indien niet, maak het deel van je todo-lijstje.