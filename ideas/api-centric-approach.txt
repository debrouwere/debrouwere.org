API-CENTRIC APPROACH

* I'd say half of the work in making the API-centric approach work has been in "taming node.js" (making asynchronicity work, to make things fast) and the other half in creating a RESTful object mapper and query tool. This is a lot of work, but it'll pay off for us, especially since, from the very start, we'll be using the same query tool on three platforms (server-side, client-side and InDesign) with only minimal adjustments to make that work.
* We have to take into account that programming through an API is never going to be as perfectly straightforward as having direct access to the source. That's the point: you sacrifice some immediate productivity in favor of longer-term gains: 
- Because you work through the API, you eat your own dogfood, and feel the hurt if you can't get access to data and operations as quickly as you'd want. This leads to a much better platform for third parties.
- Because development of applications can happen separately from developing the core API, you open up possibilities for more people to work concurrently, even outside your company.
- It leads to easier scaling later on, since an API and separate applications on top of those are generally easier to scale than a fully integrated web app.
* Validating, cleaning and saving input you get from a (writable) API can be just as tricky as doing the same with user input. In your representations, you may want to send out some extra (or read-only) data, but when people push back a changed representation, you'll need to ignore those read-only fields and throw a descriptive error if people did try to change them. A resource doesn't necessarily equate to a model let alone a database table, so you'll need to decompose structures into their constituent parts before you can save them to the database. Document-oriented databases can make this a little bit easier, but, to a lesser extent, you'll be facing the same problems there.
* For an app like ours, where we want all kinds of CMSes and services to be able to integrate with us, it pays off in the long term, but the initial development effort is not to be underestimated.