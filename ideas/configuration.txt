Purity in software development

There are all kinds of reasons why configuring applications with XML-based config files makes sense, and why configuring applications using a settings.py or application.rb file. With XML, system administrators don't need to know the source language to be able to tweak a deployment. Different end-users can deploy different websites without needing to delve into the code. Business logic should, to some extent, be managed outside of the code. Executable settings files are a potential security hole.

But in reality, the XML configurations we know from Java or Zope are too complex for non-coders to touch. Different settings interact with each other in unexpected ways. Disabling one piece of a project might bring five others down. An innocent change to a database setting upsets a less-than-excellent piece of code that assumes some things it shouldn't. So most developers don't want sysadmins or non-developers to touch settings files. Never. And the way servers are set up and the way deployments are done, having settings in an executable file is just as dangerous as having _any_ executable file _anywhere_ on your system: not at all if you're not a total cowboy.

Instead, all those external config files add weight and they spread the logical flow of your application all over the place. Particularly in Zope, you add new functionality to classes through configuration, so it's never clear what any class is going to do just by looking at its subclasses. It's powerful, but it isn't simple and it isn't maintainable.



Similar discussions about XML-based templating languages. In principle, they're a better option than a Django- or Smarty-type syntax. Editors can just edit HTML templates in a browser and they remain valid html, so layouters can tweak templates without needing to run the actual application. That's great. But in the end, themers

Or think about html/css -- Croft