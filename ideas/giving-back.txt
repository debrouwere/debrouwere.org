http://lukeplant.me.uk/blog/posts/docs-or-it-doesnt-exist/




You may have heard the phrase "ideas are worthless, it's the executation that matters". Well, if you're a coder, things are the other way around: it's the architecture, the idea, the reasoning behind the implementation that counts, not the code itself.

Please Stop Giving Back!
========================

I like open-source software projects, but I don't always like them very much. I don't like most open source projects because the people behind them are just too nice. They would love nothing more than to be able to give something back to the community. Please. Don't.

## A distinction

There's a difference between open source and open source.

A wonderful attitude that's shared by a good many programmers is this: whenever I write a piece of code, I'll put it up somewhere on the web for other people to take a look at, and perhaps even use however they see fit. And why not? It's not like every little script you write is a potential goldmine. That's <strong>open source by default</strong>. Now, having your code out in the open with a permissive license like a BSD or a MIT is technically and even philosophically as open source as it gets. Open source means open source. Simple as that. But in a more practical sense, you're not open-sourcing anything at all.

There's a difference between dropping various snippets of code somewhere on the web, and starting a well-tested, well-documented open source project, taking care to suit a number of different but related use-cases. But that's what we're really talking about when we talk about open source. It's projects like Django, OpenAtrium or Ubuntu.

Open source by default is incredibly useful because it allows any developer to learn from their fellow journeymen's code. They might even be able to copy-paste a fair bit of code from the snippets other coders make available. But open source code does not an open source project make. Don't underestimate the difference. How many times have you read "yeah, we're going to release this package, we just need to clean it up a little first" before, then never to hear anything about the nascent project again? Right.

Open source isn't charity. Charity might be part of it, but in the end it all boils down to strategy. If you're going to create a big fanfare around some code you're working on, without any intent to provide support and without a good plan on how to maintain that code well into the future, you're going to disappoint people. And they'll hold it against you, even though you're giving away your time and your code for free. And they'll be damn right to do so, because you're wasting their time and creating false expectations. So please stop giving back!

Please stop giving back!
------------------------

I'm an optimist. People, in general, are great. They want to share, they want to give back, they want to help out their fellow coders. That's great. Just don't do it by starting an open source project.

While I was at college, I saw tens of new "newspaper content management systems" come to light, a lot of them originating from some really intelligent coders at student newspapers. And they all failed. Gazjango  http://daily.swarthmore.edu/about/gazjango/ did, Ochs http://code.google.com/p/ochs/ did, Courant News http://www.maxcutler.com/2009/04/02/courant-news-a-history-and-status-update did, django-newsroom did http://code.google.com/p/django-newsroom/, CoPress http://www.copress.org/2010/02/16/copress-is-closing-down-operations/ did, OpenPublish http://openpublishapp.com/ is crappy and Innovation News http://drupal.org/project/innovationnewsprofile is just barely hanging on. 

The reason? A lot of well-meaning enthusiasm and an incredible lack of strategic thinking. And that disappoints me, because a lot of these failed open source projects could actually have been wonderful in any number of other ways: 

1. They could've released the code with the explicit caveat that it's just code, not a project.
2. They could've documented best practices and blogged about pitfalls. That's way more valuable than code. Code is easy. Knowledge is tough.
3. They could've focussed on a really small but really cool part of their code, and could've made that into a successful project instead.

An open source project entails support, it entails documentation, it entails building in backwards compatibility and creating software that's probably a lot more generic than what you currently have, in order to accomodate all kinds of different use cases.

X tips if you really want to give back
--------------------------------------

1. Think real hard: are you really looking to start a new open source project. Are you prepared to face the total time suck that entails, and handle project management with the bravura that it deserves? If not, that's okay. Just release the code and make sure to point out that it's just code and nothing more. Congrats, you've just turned what would've been a sucky open source project into an inspirational goldmine.
2. Tools for solving everyoneÕs problems tend to be tools for solving no oneÕs problem. (Courtesy of David MacIver http://www.drmaciver.com/2009/09/its-all-the-same-really) Don't try to create a software project that does everything for everyone, try to solve one little well-defined problem and solve it incredibly well.

Apps voor journalistieke websites moeten meer zijn als jQuery plugins: klein, werkt ongeacht hoe je programma er voor de rest uitziet, makkelijk in gebruik. (Al besef ik dat je scriptjes niet echt kan vergelijken met modules/apps.)

Neem een voorbeeld aan iets als Plupload, een prachtige uploadwidget waar uren en uren werk inzitten. 't Is maar een upload widget, maar hoe banaal ook, het is iets dat iedereen nodig heeft en door het feit dat het zo goed is uitgevoerd, kan je er van op aan dat het succes zal hebben. Wat je niet kan zeggen van een half-afgewerkt CMS.

3. Als je Žcht Žcht weet dat je de tijd hebt: schrijf modules (of in django: een app) voor ŽŽn bepaald stuk functionaliteit. Release niet ˆlles dat je in huis hebt, release geen CMS, maar kies dat Žne stukje uit je programmeerwerk dat het meest nuttig kan zijn voor anderen, en doe daar het beste mee dat je kan. Zorg dat je project een hoge bus-factor heeft, goed gedocumenteerd is (als ik tijd moet investeren om uit te zoeken hoe je code precies werkt kan ik ze al evengoed zelf schrijven) en dat het geen sterke eisen stelt aan gebruikers (die bestaande systemen hebben).

De nadruk in webdevelopment tegenwoordig komt steeds meer te liggen in het gebruik van best-of-breed componenten en die samen te voegen eerder dan te werken met ŽŽn monolithisch systeem (cf. Deliverance).

4. Schrijf over wat je doet. Deel snippets. Tegenwoordig met RAD-frameworks kan je vrij snel features toevoegen aan je website. Code is dus in zekere zin een 'commodity' geworden eerder dan een prijzig en geprezen goed. Ervaringen daarentegen blijven belangrijk. Hoe structureer je een tagsysteem (vrij of gesloten, meerdere tagvelden en hoe verdeeld dan?) Hoe structureer je je inhoud? (cf. Holovaty) Hoe ga je om met media? ... Je geeft geen code (of een walkthrough door een klein stukje code die je geschreven hebt), maar dat betekent ook dat je advies kan gelden over de grenzen van frameworks heen en ook langer waardevol blijft, dus je kan een pak meer mensen helpen.

Ask yourself: could I make a business out of this? If that scares you like nobody's business, you should be making an open source project out of it either.

Limit yourself. You'll do less, but the stuff you'll do will be better, and will have a way higher value.

Giving back doesn't necessarily mean giving back code. This may surprise you if you're used to twitter overload, but there's actually a dire need for more blog posts and documentation about best practices and case studies. Work at a newspaper? Tell us how best to categorize content. Tell us how the front page of a newspaper should look, what kind of content it should contain. Working on a web app? Tell us a little bit about scaling, or about UI and UX. Good content can live on for years. Bit rot sets in a great deal sooner.

Please Stop Giving Back!
========================






"So make a careful choice when starting the development of a new open source project, don't pick something you are interested in today, but something you'll probably be interested in for the next decade." (http://antirez.com/post/one-year-of-redis.html)

http://blog.ianbicking.org/2009/09/10/a-new-self-definition-for-foss/

oa. "There was this clamour in the past to get companies to open source their products. This has stopped, because all the software that got open source sucked. ItÕs just not very interesting to have a closed source program get open sourced. It doesnÕt help anyone, because the way closed source software is created in a very different way than open source software. The result is a software base that just does not engage people in a way to make it a valid piece of software for further development."





=> College newspapers overschatten zichzelf ook qua support die ze kunnen bieden. Men denkt "hey, voor ons werkt het, we poetsen dat nog een weekje op et voila". Diezelfde fout heb ik ook gemaakt. Maar hoe zeer je ook hebt proberen softcoden - iets dat op zich al tijdsrovend kan zijn - je zal nog altijd een pak extra flexibiliteit moeten inbouwen, documentatie verzorgen en features inwerken die voor jou misschien niet belangrijk zijn maar wel voor zoveel andere bladen. Veel van die systemen gebruiken Django en Drupal, terwijl net de merites van beide zijn dat je vrij snel iets kan maken dat volledig naar je zin is.

(cf. Shirky)
(http://thedailywtf.com/Articles/Soft_Coding.aspx)
