<< NOTE: dit moet non-technisch zijn, dus dingen zoals PHP, issue tracking, compiler enz. uitleggen >>

Why coding is the most beautiful profession there is

It's a bear, sometimes, getting people to understand why on earth anybody would occupy him- or herself with such a dreadfully boring endeavor as programming software.

* wonderful objectivity: either it runs or it doesn't, either it works, or it crashes. This objectivity makes it easier to stay sane. Endeavors that lack this kind of objective measure can be rather stressy: blogging, composing music, business consultancy, graphics design. Why? Because you can always doubt whether what you're doing is worth anything at all. As a coder, you might not be happy with the way you've accomplished a certain feat, but at the very least you'll know that you've accomplished it. And users won't notice the difference, because the code might differ from what you want, but the outcome doesn't.
* Coding used to be about designing algorithms and doing difficult computations. For some people it still is: for X Y when he's working on the x264 video codec, for Google engineers working on machine learning, for Facebook engineers when they decided to write a compiler that turns PHP into C code http://developers.facebook.com/blog/post/358. But for most of us, now that most development is shifting to the web, the interesting challenges aren't about the actual coding, but about softer issues. How do we build software that isn't full of features nobody ever uses, even if those are exactly the sort of features we're being payed to implement? How do we manage expectations? People change their minds all the time; they ask you to build one thing this week, but something else the next. How can we build software in a way that allows us to respond quickly to changing requirements? Are there any steps we can take up front to reduce the possibility that we end up with something that wasn't what a client intended at all, even though it looks perfectly fine to us? If this software is going to stay with us a while, are there any standards or best practices we need to agree on, to make sure that all this code won't start to look like a patchwork? (Think about a text written by five to ten people, and about how messy that could get very fast without good editorial procedures.)
* A constant need to translate what you do into layman's terms. For the clients you work with or the customers who use your software, but also for other coders. It's not always obvious what code does from looking at it, and in any case, it'd be very inefficient having to plow through everything your colleagues have written in order to be able to work with it, so coders are continually explaining their code to others. Writing documentation is actually one of the _least_ favorite aspects of being a software engineer for some people, but for me, 
* Very meritocratic: especially outside of the big old corporations, coders get hired by writing good code (evaluating a coder is often as simple as looking at his open-source contributions and also how he or she interacts with other people publicly, on blogs, in issue trackers) and having sensible things to say on a blog or 
* We make our own tools, experiment with our own practices, and have an enormous amount of discussions about best practices and methodology. Accountants rely on accounting software they don't control. Physicists work with research tools that only a lucky few have a hand in developing. Our work isn't regulated. There are certifications, but only the Java world cares about them. We decide on our own practices, we build our own tools. Compare the amount of blogs by coders with the amount of blogs by biologists or historians. Is there any other profession out there with something similar to http://thedailywtf.com/? I know of only one other: PhDComics for PhD students, and even that's not really the same, because The Daily WTF mixes up vaguely familiar office horror stories, but also leads to much serious discussion in the comments. There are few other occupations where people obsess so much about what the hell they're doing.
* A mix between very down-to-earth plumbing (getting code to work), planning and strategizing, and talking.
* There are few industries that lead to dreaming quite as easily as software coding. You just need two or three guys, laptops and hire a server or a piece of the cloud, and in a couple of months, you can have a product done. It's still tricky as hell: it's not because you build something that people will come, and getting together the right mix of people and going from idea to product is hard. But in any other industry, save perhaps journalists who can just set up a blog and get crackin', starting something  new is vastly easier in the software industry. You don't need millions of venture capital to get going, which you _would_ need if you wanted to start your own biotech company.
* Coders automate stuff. You're hardly ever working _on_ computer science, you're working on making something easier for the sales department, you're working on making cars safer, you're working on helping scientists with analyzing huge chunks of data. And while, say, a lawyer might work together with people and companies that do all sorts of different things for all sorts of different people, and architects do design buildings for all kinds of purposes, they never really go _into_ those other disciplines and occupations. As a coder, you have to. You have to understand how people work and what they're working on before you can automate it. Now, a lot of coders never get to see this breadth, because they're setting up yet another content management system for yet another client â€” because people need websites, and coders can make websites. But some of us do get to see that breadth, as consultants or as freelancers, and it's wonderful. Only journalists ever get the same experience, when they're working a beat. Coders who specialize in a certain field, like bioinformatics, don't necessarily get that breadth, but they do get the priviledge of experiencing a certain field of study or a certain occupation through an entirely different lens. A lens of processes and workflows and inefficiencies just waiting to be taken care of.

Coding, well there's no other job quite like it. At the same time immensely technical, but everywhere touched by the human serpent. Not just a job, but another way of looking at things. Getting to be the plumber and the architect at the same time. And all in a buzzing environment, sharing stories and advice with fellow coders. It becomes something you breathe.