[Do separate posts about planning death spiral; enterprise CMSes; learning to be happy with 90% --- and keep down the ranting]

[Hmm, there's a lot of good thoughts in here but I don't know if there's anything that would make a good blog post on its own. Maybe something like "the trouble with enterprise software" could work, that talks about perverse incentives, planning death spiral (Liz Keogh), buyers not being users -- either IT or managers (Chris Dixon), never being happy with 90% / the same psychology of rationalizing purchases etc. that apply to a $5 coffee apply to a $500k piece of software, people self-selecting their price-range (Patrick McKenzie)]

Another thing is that the sixties, seventies and eighties set the expectations for what software development and integration is like: it will cost you a ridiculous amount of money, only do half of what you want and it'll take six to twelve months to install it and integrate it with the tools you already have. Software development has gotten much easier since then, but enterprise software vendors have somehow been able to convince their clients that that's still how software works.

People are also very convinced that there are certain things you just kind of need. Things like telephones. OF COURSE YOU NEED PHONES! For about $15 a month, you can set someone up on Skype with unlimited minutes, a real phone number, voicemail, forwarding, the whole shebang.

Now, I work at a local media company in Iowa, and just a month ago we had to fire two journalists because advertising is not what it used to be. (I'm not giving away any company secrets here: advertising is not what it used to be _everywhere_.) I had a chance to look at our 2011 phone bills, and you could hire those two journalists right back if the entire newsroom (not the entire organization, just the newsroom!) stopped using their regular phones and switched to Skype. Just sayin'.

It's very easy to get into this kind of bipolar thing where on the one hand buying a cake to celebrate someone who won an award is considered lavish, but on the other hand spending millions on a CMS is not. 

---

The other thing is that managers always look for effortless solutions. This makes sense: if you can accomplish goal X just by buying a piece of software and giving the third-party vendor a cut, sure, why not. The problem is that third-party vendors are *very* much aware of this and will tweak the numbers until they get about 2/3rds of all the profit out of anything. You still get enough to make you kind of wary of searching for a better solution (developing something in-house, say?) but those vendors will suck up as much of the profit as they can.

Free market is fun and all that, but the thing is, for a lot of those third-party tools that newspapers use (newspaper-to-mobile-and-tablet, daily deals) there are much more lucrative opportunities in other industries, so these companies usually don't have a ton of competition and there's usually a sort of implicit understanding about competitors that waging a price war would be bad for all involved so let's just not do that.

---

There's this really interesting phenomenon in project management: the planning death spiral. (Liz Keogh talks about it very eloquently "on her blog":http://lizkeogh.com/2012/01/30/the-real-cost-of-change/.) At various points in our personal and professional lives, there are some things that we don't want to rush into, so we think about it a little bit, we plan, we consult with peers and so on. And then we make what is hopefully an informed decision. The more something costs (money, time, opportunity costs) the more we want to plan. But the unfortunate thing is that planning is also a cost. I don't work for free and neither does any of my colleagues. And so the more you plan, the bigger your time and emotional investment, the more you want to make sure you get it really right. And you can easily see how that sort of process can spin out of control: a planning death spiral.

Enterprise software is a really good example of the planning death spiral, as Joel Spolsky pointed out in 2006. When a manager wants to buy something, there's a sort of mental treshold. Anything below $500? No point even thinking about it, just do it. Anything above $2000? Lets' have a meeting about this. Better yet: let's have five meetings about it and fly over representatives from five different companies to talk about their software and why it's better than that of their competitors. And then talk some more. All of this leads to a situation where, for an enterprise software company to make a sale (also counting the many sales they don't make), selling software much below $75,000 does not make sense, because you've spent half of that already just _selling_ the damn thing, and the other half you need to keep in the bank to pay your support staff – because if a company is making a decision to spend as much money as they are, they're going to want 24/7 support.

The irony is that it's our digilence that has led to enterprise software being as expensive as it is. And it's next to impossible to undo that.

Enterprise software in general is weird.

---

CMSes are an interesting case.

Lots of people would say that you just can't make a CMS that'll work for everybody, because the use-cases are so diverse, with some people using e.g. Drupal as a blog, others as a corporate intranet, others use it to build social networks, and some people build news websites on top of it. That has certainly been my experience too, and it's why I avoid CMSes like the plague for anything that is not _exactly_ what they were made to do: content management.

But for news CMSes, that whole argument doesn't really apply. I mean, sure, every newsroom wants to do things a little bit differently, has different workflows, has weird requests for how they want things to work and some want to explore with entirely new kinds of journalism like PolitiFact. But all in all, the sort of stuff a news CMS needs to be able to do is pretty well-defined. There's a basic feature set all of us need. And nobody's even doing that right.

Even for generic CMSes, we might be letting people off the hook a little bit too easily. I know of no CMS that has the kind of extension capabilities it *should* have, the magic combo of

 - custom content types (preferably schemaless under the hood)
 - plugins that have full access to whatever the CMS itself has access to
 - an external API
 - webhooks for push notifications and mogrification

The reason we don't have that sort of stuff is because, frankly, really good programmers have better things to do than building another shitty generic open-source PHP content management system. And they definitely have better things to do than work at a shithole like CCI or Atex. Not because it can't be done.

---

The reason why it's so tough to come up with a really good CMS for the news industry is that 

* cost does not matter at all to decisionmakers, so it's almost impossible to compete on that; and althrough newspapers will happily pay for software "integration", the idea of buying a very cheap solution and then tacking on the necessary pieces themselves is alien to them. They're newspaper companies, not technology companies.
* it's a group decision and a very tough one at that, which makes sales very hard (compare with Basecamp: B2B, but considering that the alternative is no project management and doing everything through email, and really, it's not a life-changing decision, so it's usually the project manager who decides at one point to just go ahead and pull out a credit card)
* people generally don't have a fucking clue, and so a salesperson showing a bunch of Powerpoints is actually not imposing on our time at all, he's helpful because he looks like maybe he *does* have a clue so we don't have to figure things out ourselves. (As an addendum though, this cluelessness has a reason: the newspaper industry used to be a very stable industry, and in a very stable industry it makes sense to focus your company entirely on day-to-day output, and use consultants whenever there is a challenge or opportunity on the horizon that you sort of feel that you maybe want to act on. And if you want something even cheaper than that, substitute salesmen for consultants. Most people at newspapers are crazy skilled – our own salesteam is just ridiculously good at what they do – it's just that their skillset is limited to putting out a good-enough newspaper at the absolute lowest price, not to figure out a long-term tech strategy.)
* the whole disruptive innovation thing doesn't work. The idea of disruptive innovation is that you find a customer base that'll be happy with a shitty product as long as it's convenient or cheap. In the news industry those would be student newspapers, you might say. Except that student newspapers often have exactly the same kinds of requirements a commercial newspaper has: they need to have a website and some sort of integration with InDesign or Quark, they do advertising too, 

The only glimmer of hope there is that student newspapers can count on a huge amount of unpaid labor, and so you can skimp on a feature here and there because they can always find a monkey to do it manually. The company I used to work for, Camayak, actually operates based on this strategy: their CMS has no print integration at all, but it doesn't matter because _you can always copy-paste_.

But at that point, you're suddenly confronted with another problem: open-source CMSes have totally saturated the "cheap and good" niche, and again, because of those huge chunks of free labor, finding an online editor that will massage a WordPress install until it does everything the student newspaper would ever want is not that hard.

---

Another thing is that in some cases, over the years, newspapers have built up beautiful systems where five or six different software packages interact in such a way as to do *exactly* what the newspaper wants. The thing is, no lower-cost option will be able to replace that sort of bespoke stuff, and that means you have to decide whether you're happy with 90% of what you have right now, or whether you want to keep things the way they are. New companies will generally go for "good enough", often because the cost of doing everything exactly the way they'd want to is too large, but just as often because the established workflows at big papers wouldn't be characterized as ideal by these startups anyway... and that's how new companies are able to beat old ones.