---
layout: post
language: en
categories:
    - coding
title: When websites stopped being things
summary: 
---

Websites are more complex every day. Frameworks and CMSes make it easier than ever to create feature-rich websites quickly, but our collective wish to push the envelope keeps us on our toes: the real-time web, faceted search, asynchronous processing, sites and apps that work on any kind of device, and so forth.

Web frameworks can keep that endless deluge of feature requests and ponies manageable, but to get the most out of a framework, you're pretty much required to consolidate your infrastructure and place all bets on a single programming language, a single framework and a single way of doing things. And that sucks.

Which is why websites used to be things, but aren't anymore. Sites, even big sites, used to consist entirely of a single Movable Type installation, or a Drupal setup, or your own little big homegrown solution. But that's hardly ever the case anymore. Big sites have become confederations of independent components. Your hypothetical news emporium may have blogs that run on Wordpress, but you also maintain a couple of wikis, comments are handled by Facebook Comments, your online advertising is taken care of by DoubleClick, analytics by ChartBeat, classifieds using a custom-built Django app and that special project the newsroom did last week got its own microsite.

(There's a parallel in how web apps are built nowadays, even though the details are a little bit different: database, caching layer, message queue, various third-party and internal webservices, full-text search engine, load balancing and, oh yeah, the app itself.)

Crafting a website from a bunch of unrelated applications is actually not ideal: because different systems all work slightly differently, you kind of have to hope that they'll mesh without much issue. It's not ideal, but ours isn't the best of all possible worlds either, and it's that world we have to build software for. The seemingly ideal alternative, in practice, ends up being a nightmare: a monolithic system that tries to handle blogging, ad handling, analytics, video serving, live chats, commenting and special-purpose mini-apps... and because of its lack of focus cannot but do poorly at each of those different things. Nothing saps the life out of product managers _and_ programmers faster than a big old system that's breaking under its own weight.

Many websites are already confederated: people just love being able to add third-party widgets to their website, and get new stuff up and running in seconds rather than the months it might take to develop something similar internally. But not all confederated websites are created equally: as good as those third-party widgets look, they often keep the underlying data (events, comments, polls) to themselves, making it impossible to use your very own content in any other context than the one your third-party vendor provides. Most of those apps and widgets aren't even themable, making it impossible to create a uniform user experience on your site. That's when you get what "Aaron Frerichs":http://www.aaronfrerichs.com/ calls Frankenstein sites: ugly patchworks of components that are supposed to resemble a website.

To do it right, "sayeth Ian Bicking":http://deliverance.openplans.org/philosophy.html, you'll need:

# A common look-and-feel across the site.
# Cohesive navigation.
# Indexing of the entire site.
# Shared authentication and user accounts.
# Cross-cutting functionality (e.g., commenting).

And those aren't exactly solved problems, so I'm not saying confederated websites are always the easiest solution. But if you do manage to get it right, select components carefully and have a good team that can make them all work together, the end result is an architecture that'll contain only the best pieces of software, using the best platform for the problem at hand, and you'll never have to worry about being stuck with a system you can't experiment with, or have to choose between two CMSes that each only have half of what you really need. No more upgrade nightmares, no more compromises and no more mediocre software you only use because it's the only thing that happens to be available for your platform.

For most organizations, it's not quite a reality right now, but I'm guessing it _will_ be five years from now. Now let me come to the point: what, in the distributed architecture we're working towards, will be the role of a CMS?

First off: it'll be a vastly reduced role. Little apps are or will be taking care of all sorts of things that traditionally a CMS would do, like categorizing content and managing comments. In particular for newspapers, content creation will probably happen elsewhere, too, and in a platform-neutral way, because that way the same content that ends up in a CMS can also be used in print.

And secondly, the defining feature of a great content management system will no longer be how well it _manages_ content or even how easy it makes it to _produce_ content: we're taking care of that stuff elsewhere. Instead, the most important criterion in deciding the worth of a CMS is how well it can aggregate content from a ton of different places, how well it plays together with external apps, and how easy it is to apply a consistent visual theme to that content. "The home page is merely a master aggregation of this confederation" "as Matt Waite argues":http://www.niemanlab.org/2011/03/matt-waite-to-build-a-digital-future-for-news-developers-have-to-be-able-to-hack-at-the-core-of-the-old-ways/.

Among newspapers, The Guardian is perhaps furthest along the CMSless path: many parts of their website are driven by a whole bunch of search queries that fetch information from an internal search engine, which in turn grabs its content from an internal content creation tool (the vestige of what you'd traditionally call a CMS), plus a theming layer to display those search results in a pretty way.

So what the future needs are powerful content ingestion tools and quick and easy ways to display that content in the style that you want, not yet another CMS. That's what I'm betting on.