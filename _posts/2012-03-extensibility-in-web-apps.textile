---
layout: post
language: en
title: Extensibility in web apps
---

NOTE TO SELF: come to the point more quickly, currently I essentially start off with a rumination that really belongs at the very end of this blog post, about how this kind of extensibility has its limitations because you can't tightly control the user experience anymore, and so that it makes sense for SaaS providers to be wary of providing that sort of access, but that it does make sense for a certain class of apps, and that it's only recently become really feasible to do something like this in an elegant way (with single-page apps, API-driven apps, client-side rendering and the increased interest in UI libraries, be it plain ol' Bootstrap or your very own [include link from Delicious]).

---

We've really nailed it, I think. Just about every web app coming out of Silicon Valley in the past five years has been simple, elegant and easy to use.

Because the likes of ----- want to keep things simple, app developers have been wary of allowing third parties access to the innards of their application. There's nothing similar to a WordPress plugin for 37signals Basecamp, say. The only way to modify its user interface would be by writing Greasemonkey scripts. There's a reason for that: these apps don't want you to mess with their finely honed user experience. Instead, they encourage you to create your own application that's simple, elegant and easy to use, and then integrate it with whatever other apps you want through their API. And while that hasn't been very successful from a pure numbers perspective (Joomla has over 9100 extensions now, Basecamp lists 24 integrations) from a user experience point of view it actually works very well: these integrations are all good, focused, simple apps.

An API as the only extension point makes sense for another reason: you don't have to provide a platform for these extensions to run on, they can live on their own servers, and they don't have to abide by the tech stack you've chosen for your own app. Basecamp, to continue our running example, is a Ruby on Rails application, but you can write your integration in Haskell or Java or whatever.

Still, I feel there's room for deeper integration in many apps. And maybe I'm being too charitable, and most apps don't provide true extensibility simply because it's very, very hard to do.

Except I think that's changing: it's not very hard to do anymore. With the advent of single-page client-side applications written almost entirely in JavaScript, where you build your application off of your own API. In that kind of scenario, by the nature of your app (1) everything happens in JavaScript, so it's easy to just allow trusted third parties (or the app users themselves) to add their own JavaScript files and extend or add to your app, by adding routes and entirely new pages, or just widgets or new behaviors, or by hooking into events. See e.g. https://talker.tenderapp.com/kb/api/frontend-plugin-api

And because you built your app off of your own API, you've been forced to expose the full breadth of your functionality through your API instead of just a subset – otherwise you wouldn't be able to build your own app! – and thus users have exactly the same kinds of capabilities to extend your app that you do (provided they're comfortable with running their own servers for some of the code.)


 - plugins that have full access to whatever the CMS itself has access to
 - an API
 - use external servers to store data of a type that the app itself does not provide, 
   though optionally also providing a "userdata" space on every object that API
   clients can freely write to (perhaps further namespaced per app), which is an easy
   thing to do if your app is schemaless under the hood but doable even if it's not.
 - webhooks for push notifications and mogrification


---

The only web app I can think of that allows real extensibility is "Salesforce":https://www.salesforce.com/, really. And there's a reason why: because Salesforce doesn't solve *one* specific problem for companies, but rather a whole bunch of related problems. Which means that it's very hard for them to provide everything their customers would need out of the box. [TODO: research this more, because AppExchange is actually a bunch of separate applications that may or may not integrate with SalesForce itself. It's more like PaaS.]